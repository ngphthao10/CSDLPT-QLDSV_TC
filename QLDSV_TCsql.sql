USE [master]
GO

/****** Object:  Database [QLDSV_TC]    Script Date: 6/25/2024 10:15:43 PM ******/
CREATE DATABASE [QLDSV_TC]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'QLDSV_TC', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\QLDSV_TC.mdf' , SIZE = 73728KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'QLDSV_TC_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\QLDSV_TC_log.ldf' , SIZE = 270336KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT, LEDGER = OFF
GO

IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [QLDSV_TC].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO

ALTER DATABASE [QLDSV_TC] SET ANSI_NULL_DEFAULT OFF 
GO

ALTER DATABASE [QLDSV_TC] SET ANSI_NULLS OFF 
GO

ALTER DATABASE [QLDSV_TC] SET ANSI_PADDING OFF 
GO

ALTER DATABASE [QLDSV_TC] SET ANSI_WARNINGS OFF 
GO

ALTER DATABASE [QLDSV_TC] SET ARITHABORT OFF 
GO

ALTER DATABASE [QLDSV_TC] SET AUTO_CLOSE OFF 
GO

ALTER DATABASE [QLDSV_TC] SET AUTO_SHRINK OFF 
GO

ALTER DATABASE [QLDSV_TC] SET AUTO_UPDATE_STATISTICS ON 
GO

ALTER DATABASE [QLDSV_TC] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO

ALTER DATABASE [QLDSV_TC] SET CURSOR_DEFAULT  GLOBAL 
GO

ALTER DATABASE [QLDSV_TC] SET CONCAT_NULL_YIELDS_NULL OFF 
GO

ALTER DATABASE [QLDSV_TC] SET NUMERIC_ROUNDABORT OFF 
GO

ALTER DATABASE [QLDSV_TC] SET QUOTED_IDENTIFIER OFF 
GO

ALTER DATABASE [QLDSV_TC] SET RECURSIVE_TRIGGERS OFF 
GO

ALTER DATABASE [QLDSV_TC] SET  ENABLE_BROKER 
GO

ALTER DATABASE [QLDSV_TC] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO

ALTER DATABASE [QLDSV_TC] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO

ALTER DATABASE [QLDSV_TC] SET TRUSTWORTHY OFF 
GO

ALTER DATABASE [QLDSV_TC] SET ALLOW_SNAPSHOT_ISOLATION ON 
GO

ALTER DATABASE [QLDSV_TC] SET PARAMETERIZATION SIMPLE 
GO

ALTER DATABASE [QLDSV_TC] SET READ_COMMITTED_SNAPSHOT OFF 
GO

ALTER DATABASE [QLDSV_TC] SET HONOR_BROKER_PRIORITY OFF 
GO

ALTER DATABASE [QLDSV_TC] SET RECOVERY FULL 
GO

ALTER DATABASE [QLDSV_TC] SET  MULTI_USER 
GO

ALTER DATABASE [QLDSV_TC] SET PAGE_VERIFY CHECKSUM  
GO

ALTER DATABASE [QLDSV_TC] SET DB_CHAINING OFF 
GO

ALTER DATABASE [QLDSV_TC] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO

ALTER DATABASE [QLDSV_TC] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO

ALTER DATABASE [QLDSV_TC] SET DELAYED_DURABILITY = DISABLED 
GO

ALTER DATABASE [QLDSV_TC] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO

ALTER DATABASE [QLDSV_TC] SET QUERY_STORE = ON
GO

ALTER DATABASE [QLDSV_TC] SET QUERY_STORE (OPERATION_MODE = READ_WRITE, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 30), DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_STORAGE_SIZE_MB = 1000, QUERY_CAPTURE_MODE = AUTO, SIZE_BASED_CLEANUP_MODE = AUTO, MAX_PLANS_PER_QUERY = 200, WAIT_STATS_CAPTURE_MODE = ON)
GO

ALTER DATABASE [QLDSV_TC] SET  READ_WRITE 
GO

USE [QLDSV_TC]
GO

/****** Object:  Table [dbo].[MONHOC]    Script Date: 6/25/2024 10:16:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[MONHOC](
	[MAMH] [nchar](10) NOT NULL,
	[TENMH] [nvarchar](50) NOT NULL,
	[SOTIET_LT] [int] NOT NULL,
	[SOTIET_TH] [int] NOT NULL,
	[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_MONHOC] PRIMARY KEY CLUSTERED 
(
	[MAMH] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[MONHOC] ADD  CONSTRAINT [MSmerge_df_rowguid_E13B0FF2ED914A1A8459A3F67623EB57]  DEFAULT (newsequentialid()) FOR [rowguid]
GO

USE [QLDSV_TC]
GO

/****** Object:  Table [dbo].[KHOA]    Script Date: 6/25/2024 10:17:23 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[KHOA](
	[MAKHOA] [nchar](10) NOT NULL,
	[TENKHOA] [nvarchar](50) NOT NULL,
	[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_KHOA] PRIMARY KEY CLUSTERED 
(
	[MAKHOA] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[KHOA] ADD  CONSTRAINT [MSmerge_df_rowguid_1511329929D0414DA85AA7D759F329FC]  DEFAULT (newsequentialid()) FOR [rowguid]
GO



USE [QLDSV_TC]
GO

/****** Object:  Table [dbo].[GIANGVIEN]    Script Date: 6/25/2024 10:16:36 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[GIANGVIEN](
	[MAGV] [nchar](10) NOT NULL,
	[MAKHOA] [nchar](10) NOT NULL,
	[HO] [nvarchar](50) NOT NULL,
	[TEN] [nvarchar](10) NOT NULL,
	[HOCVI] [nvarchar](20) NULL,
	[HOCHAM] [nvarchar](20) NULL,
	[CHUYENMON] [nvarchar](50) NULL,
	[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_GIANGVIEN] PRIMARY KEY CLUSTERED 
(
	[MAGV] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[GIANGVIEN] ADD  CONSTRAINT [MSmerge_df_rowguid_06092651A0D44E04A28E0D4769C36237]  DEFAULT (newsequentialid()) FOR [rowguid]
GO

ALTER TABLE [dbo].[GIANGVIEN]  WITH CHECK ADD  CONSTRAINT [FK_GIANGVIEN_KHOA] FOREIGN KEY([MAKHOA])
REFERENCES [dbo].[KHOA] ([MAKHOA])
GO

ALTER TABLE [dbo].[GIANGVIEN] CHECK CONSTRAINT [FK_GIANGVIEN_KHOA]
GO

USE [QLDSV_TC]
GO

/****** Object:  Table [dbo].[LOP]    Script Date: 6/25/2024 10:17:37 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[LOP](
	[MALOP] [nchar](10) NOT NULL,
	[TENLOP] [nvarchar](50) NOT NULL,
	[KHOAHOC] [nchar](9) NOT NULL,
	[MAKHOA] [nchar](10) NOT NULL,
	[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_LOP] PRIMARY KEY CLUSTERED 
(
	[MALOP] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[LOP] ADD  CONSTRAINT [MSmerge_df_rowguid_6E3A0010FB5244B8B3756DCF2B4CFB7C]  DEFAULT (newsequentialid()) FOR [rowguid]
GO

ALTER TABLE [dbo].[LOP]  WITH CHECK ADD  CONSTRAINT [FK_LOP_KHOA] FOREIGN KEY([MAKHOA])
REFERENCES [dbo].[KHOA] ([MAKHOA])
GO

ALTER TABLE [dbo].[LOP] CHECK CONSTRAINT [FK_LOP_KHOA]
GO

USE [QLDSV_TC]
GO

USE [QLDSV_TC]
GO

/****** Object:  Table [dbo].[SINHVIEN]    Script Date: 6/25/2024 10:20:16 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[SINHVIEN](
	[MASV] [nchar](10) NOT NULL,
	[HO] [nvarchar](50) NOT NULL,
	[TEN] [nvarchar](10) NOT NULL,
	[PHAI] [bit] NOT NULL,
	[DIACHI] [nvarchar](100) NULL,
	[NGAYSINH] [date] NULL,
	[MALOP] [nchar](10) NOT NULL,
	[DANGHIHOC] [bit] NOT NULL,
	[PASSWORD] [nvarchar](40) NULL,
	[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_SINHVIEN] PRIMARY KEY CLUSTERED 
(
	[MASV] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[SINHVIEN] ADD  CONSTRAINT [DF_SINHVIEN_PHAI]  DEFAULT ('false') FOR [PHAI]
GO

ALTER TABLE [dbo].[SINHVIEN] ADD  CONSTRAINT [DF_SINHVIEN_DANGHIHOC]  DEFAULT ('false') FOR [DANGHIHOC]
GO

ALTER TABLE [dbo].[SINHVIEN] ADD  CONSTRAINT [DF_SINHVIEN_PASSWORD]  DEFAULT ('') FOR [PASSWORD]
GO

ALTER TABLE [dbo].[SINHVIEN] ADD  CONSTRAINT [MSmerge_df_rowguid_78C1A1A1588F4131BB7CC26A02E6E5F8]  DEFAULT (newsequentialid()) FOR [rowguid]
GO

ALTER TABLE [dbo].[SINHVIEN]  WITH CHECK ADD  CONSTRAINT [FK_SINHVIEN_LOP] FOREIGN KEY([MALOP])
REFERENCES [dbo].[LOP] ([MALOP])
ON UPDATE CASCADE
GO

ALTER TABLE [dbo].[SINHVIEN] CHECK CONSTRAINT [FK_SINHVIEN_LOP]
GO

/****** Object:  Table [dbo].[LOPTINCHI]    Script Date: 6/25/2024 10:18:17 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[LOPTINCHI](
	[MALTC] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[NIENKHOA] [nchar](9) NOT NULL,
	[HOCKY] [int] NOT NULL,
	[MAMH] [nchar](10) NOT NULL,
	[NHOM] [int] NOT NULL,
	[MAGV] [nchar](10) NOT NULL,
	[MAKHOA] [nchar](10) NOT NULL,
	[SOSVTOITHIEU] [int] NOT NULL,
	[HUYLOP] [bit] NOT NULL,
	[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_LOPTINCHI] PRIMARY KEY CLUSTERED 
(
	[MALTC] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_LOPTINCHI] UNIQUE NONCLUSTERED 
(
	[NIENKHOA] ASC,
	[HOCKY] ASC,
	[MAMH] ASC,
	[NHOM] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[LOPTINCHI] ADD  CONSTRAINT [DF_LOPTINCHI_HUYLOP]  DEFAULT ('false') FOR [HUYLOP]
GO

ALTER TABLE [dbo].[LOPTINCHI] ADD  CONSTRAINT [MSmerge_df_rowguid_9C75AF7393C744A6B7CD240350D2FBCA]  DEFAULT (newsequentialid()) FOR [rowguid]
GO

ALTER TABLE [dbo].[LOPTINCHI]  WITH CHECK ADD  CONSTRAINT [FK_LOPTINCHI_GIANGVIEN] FOREIGN KEY([MAGV])
REFERENCES [dbo].[GIANGVIEN] ([MAGV])
ON UPDATE CASCADE
GO

ALTER TABLE [dbo].[LOPTINCHI] CHECK CONSTRAINT [FK_LOPTINCHI_GIANGVIEN]
GO

ALTER TABLE [dbo].[LOPTINCHI]  WITH CHECK ADD  CONSTRAINT [FK_LOPTINCHI_KHOA] FOREIGN KEY([MAKHOA])
REFERENCES [dbo].[KHOA] ([MAKHOA])
GO

ALTER TABLE [dbo].[LOPTINCHI] CHECK CONSTRAINT [FK_LOPTINCHI_KHOA]
GO

ALTER TABLE [dbo].[LOPTINCHI]  WITH CHECK ADD  CONSTRAINT [FK_LOPTINCHI_MONHOC] FOREIGN KEY([MAMH])
REFERENCES [dbo].[MONHOC] ([MAMH])
ON UPDATE CASCADE
GO

ALTER TABLE [dbo].[LOPTINCHI] CHECK CONSTRAINT [FK_LOPTINCHI_MONHOC]
GO

ALTER TABLE [dbo].[LOPTINCHI]  WITH CHECK ADD  CONSTRAINT [CK_SOSVTOITHIEU] CHECK  (([SOSVTOITHIEU]>(0)))
GO

ALTER TABLE [dbo].[LOPTINCHI] CHECK CONSTRAINT [CK_SOSVTOITHIEU]
GO

ALTER TABLE [dbo].[LOPTINCHI]  WITH NOCHECK ADD  CONSTRAINT [repl_identity_range_72B6F028_9633_4670_9807_38C5B22BB589] CHECK NOT FOR REPLICATION (([MALTC]>(8) AND [MALTC]<=(1008) OR [MALTC]>(1008) AND [MALTC]<=(2008)))
GO

ALTER TABLE [dbo].[LOPTINCHI] CHECK CONSTRAINT [repl_identity_range_72B6F028_9633_4670_9807_38C5B22BB589]
GO

USE [QLDSV_TC]
GO

/****** Object:  Table [dbo].[DANGKY]    Script Date: 6/25/2024 10:18:48 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[DANGKY](
	[MALTC] [int] NOT NULL,
	[MASV] [nchar](10) NOT NULL,
	[DIEM_CC] [int] NULL,
	[DIEM_GK] [float] NULL,
	[DIEM_CK] [float] NULL,
	[HUYDANGKY] [bit] NULL,
	[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_DANGKY] PRIMARY KEY CLUSTERED 
(
	[MALTC] ASC,
	[MASV] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_DANGKY] UNIQUE NONCLUSTERED 
(
	[MALTC] ASC,
	[MASV] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[DANGKY] ADD  CONSTRAINT [MSmerge_df_rowguid_9A2A68AA48A84F4BA24CFAA10241DF87]  DEFAULT (newsequentialid()) FOR [rowguid]
GO

ALTER TABLE [dbo].[DANGKY]  WITH CHECK ADD  CONSTRAINT [FK_CTLTC_SINHVIEN] FOREIGN KEY([MASV])
REFERENCES [dbo].[SINHVIEN] ([MASV])
ON UPDATE CASCADE
GO

ALTER TABLE [dbo].[DANGKY] CHECK CONSTRAINT [FK_CTLTC_SINHVIEN]
GO

ALTER TABLE [dbo].[DANGKY]  WITH CHECK ADD  CONSTRAINT [FK_DANGKY_LOPTINCHI] FOREIGN KEY([MALTC])
REFERENCES [dbo].[LOPTINCHI] ([MALTC])
GO

ALTER TABLE [dbo].[DANGKY] CHECK CONSTRAINT [FK_DANGKY_LOPTINCHI]
GO

USE [QLDSV_TC]
GO

/****** Object:  Table [dbo].[HOCPHI]    Script Date: 6/25/2024 10:18:57 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[HOCPHI](
	[MASV] [nchar](10) NOT NULL,
	[NIENKHOA] [nchar](9) NOT NULL,
	[HOCKY] [int] NOT NULL,
	[HOCPHI] [int] NOT NULL,
	[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_HOCPHI] PRIMARY KEY CLUSTERED 
(
	[MASV] ASC,
	[NIENKHOA] ASC,
	[HOCKY] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[HOCPHI] ADD  CONSTRAINT [DF_HOCPHI_HOCKY]  DEFAULT ((1)) FOR [HOCKY]
GO

ALTER TABLE [dbo].[HOCPHI] ADD  CONSTRAINT [DF_HOCPHI_HOCPHI]  DEFAULT ((6000000)) FOR [HOCPHI]
GO

ALTER TABLE [dbo].[HOCPHI] ADD  CONSTRAINT [MSmerge_df_rowguid_979DF3AC59D2403BB9A038D82A8126E1]  DEFAULT (newsequentialid()) FOR [rowguid]
GO

ALTER TABLE [dbo].[HOCPHI]  WITH CHECK ADD  CONSTRAINT [FK_HOCPHI_SINHVIEN] FOREIGN KEY([MASV])
REFERENCES [dbo].[SINHVIEN] ([MASV])
ON UPDATE CASCADE
GO

ALTER TABLE [dbo].[HOCPHI] CHECK CONSTRAINT [FK_HOCPHI_SINHVIEN]
GO

ALTER TABLE [dbo].[HOCPHI]  WITH CHECK ADD  CONSTRAINT [CK_HOCKY] CHECK  (([HOCKY]>=(1) AND [HOCKY]<=(4)))
GO

ALTER TABLE [dbo].[HOCPHI] CHECK CONSTRAINT [CK_HOCKY]
GO

ALTER TABLE [dbo].[HOCPHI]  WITH CHECK ADD  CONSTRAINT [CK_HOCPHI] CHECK  (([HOCPHI]>(0)))
GO

ALTER TABLE [dbo].[HOCPHI] CHECK CONSTRAINT [CK_HOCPHI]
GO

USE [QLDSV_TC]
GO

/****** Object:  Table [dbo].[CT_DONGHOCPHI]    Script Date: 6/25/2024 10:19:08 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[CT_DONGHOCPHI](
	[MASV] [nchar](10) NOT NULL,
	[NIENKHOA] [nchar](9) NOT NULL,
	[HOCKY] [int] NOT NULL,
	[NGAYDONG] [date] NOT NULL,
	[SOTIENDONG] [int] NOT NULL,
	[rowguid] [uniqueidentifier] ROWGUIDCOL  NOT NULL,
 CONSTRAINT [PK_CT_DONGHOCPHI] PRIMARY KEY CLUSTERED 
(
	[MASV] ASC,
	[NIENKHOA] ASC,
	[HOCKY] ASC,
	[NGAYDONG] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[CT_DONGHOCPHI] ADD  CONSTRAINT [DF_CT_DONGHOCPHI_NGAYDONG]  DEFAULT (getdate()) FOR [NGAYDONG]
GO

ALTER TABLE [dbo].[CT_DONGHOCPHI] ADD  CONSTRAINT [MSmerge_df_rowguid_61F275AC43CC46F7AA8590EA38D296A0]  DEFAULT (newsequentialid()) FOR [rowguid]
GO

ALTER TABLE [dbo].[CT_DONGHOCPHI]  WITH CHECK ADD  CONSTRAINT [FK_CT_DONGHOCPHI_HOCPHI] FOREIGN KEY([MASV], [NIENKHOA], [HOCKY])
REFERENCES [dbo].[HOCPHI] ([MASV], [NIENKHOA], [HOCKY])
GO

ALTER TABLE [dbo].[CT_DONGHOCPHI] CHECK CONSTRAINT [FK_CT_DONGHOCPHI_HOCPHI]
GO

ALTER TABLE [dbo].[CT_DONGHOCPHI]  WITH CHECK ADD  CONSTRAINT [CK_SOTIENDONG] CHECK  (([SOTIENDONG]>(0)))
GO

ALTER TABLE [dbo].[CT_DONGHOCPHI] CHECK CONSTRAINT [CK_SOTIENDONG]
GO

USE [QLDSV_TC]
GO

/****** Object:  View [dbo].[V_DS_LOGINNAME_USERNAME]    Script Date: 6/25/2024 10:20:58 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[V_DS_LOGINNAME_USERNAME]
AS
	SELECT dp.name AS UserName, sp.name AS LoginName, GV.HO+ ' '+ GV.TEN AS HOTEN 
	FROM sys.database_principals dp
	INNER JOIN sys.server_principals sp ON dp.sid = sp.sid
	INNER JOIN GIANGVIEN GV ON GV.MAGV = DP.name
	WHERE dp.type_desc IN ('SQL_USER', 'WINDOWS_USER')
GO

USE [QLDSV_TC]
GO

/****** Object:  View [dbo].[V_DS_PHANMANH]    Script Date: 6/25/2024 10:21:07 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[V_DS_PHANMANH] AS
	SELECT PUBS.description AS TENPM, SUBS.subscriber_server AS TENSERVER
	FROM dbo.sysmergepublications AS PUBS INNER JOIN
	dbo.sysmergesubscriptions AS SUBS ON PUBS.pubid = SUBS.pubid AND PUBS.publisher <> SUBS.subscriber_server
GO

USE [QLDSV_TC]
GO

/****** Object:  UserDefinedTableType [dbo].[TYPE_DANGKY]    Script Date: 6/25/2024 10:21:53 PM ******/
CREATE TYPE [dbo].[TYPE_DANGKY] AS TABLE(
	[MALTC] [int] NULL,
	[MASV] [nchar](10) NULL,
	[DIEM_CC] [int] NULL,
	[DIEM_GK] [float] NULL,
	[DIEM_CK] [float] NULL
)
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_BangDiemMHLTC]    Script Date: 6/25/2024 10:22:49 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_BangDiemMHLTC]
@NIENKHOA NCHAR(9), @HOCKY INT, @TENMH NVARCHAR(50), @NHOM INT
AS
BEGIN
	DECLARE @MALTC INT
	SELECT @MALTC = MALTC FROM LOPTINCHI 
		WHERE NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY AND NHOM = @NHOM AND HUYLOP = 0 AND MAMH = (SELECT MAMH FROM MONHOC WHERE TENMH = @TENMH)

	SELECT DK.MASV, HO, TEN, DIEM_CC, DIEM_GK, DIEM_CK
	FROM (SELECT MASV, DIEM_CC, DIEM_GK, DIEM_CK FROM DANGKY
				WHERE MALTC = @MALTC AND HUYDANGKY = 0) DK,
		(SELECT MASV, HO, TEN FROM SINHVIEN) SV
	WHERE DK.MASV = SV.MASV
	ORDER BY TEN, HO
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[sp_BangDiemTongKetTheoLop]    Script Date: 6/25/2024 10:22:59 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_BangDiemTongKetTheoLop] @MALOP nchar(10)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT SV.MASV + '-' +SV.HO + ' ' + SV.TEN AS INFO, MH.TENMH,
	MAX(ISNULL(DK.DIEM_CC, 0) * 0.1 + ISNULL(DK.DIEM_GK, 0) * 0.3 + ISNULL(DK.DIEM_CK, 0) * 0.6) AS DIEM_TONG_KET
	FROM 
	(SELECT MASV, MALOP, DANGHIHOC, HO, TEN FROM SINHVIEN WHERE MALOP = @MALOP AND DANGHIHOC = 0) SV,
	(SELECT MALTC, MAMH FROM LOPTINCHI) LTC,
	(SELECT MASV, MALTC, DIEM_CC, DIEM_GK, DIEM_CK FROM DANGKY WHERE HUYDANGKY = 0) DK,
	(SELECT MAMH, TENMH FROM MONHOC) MH
	WHERE LTC.MAMH = MH.MAMH AND DK.MALTC = LTC.MALTC AND SV.MASV = DK.MASV 
	GROUP BY SV.MASV, SV.HO, SV.TEN, MH.TENMH
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_CHECK_DSDK]    Script Date: 6/25/2024 10:23:08 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_CHECK_DSDK] 
@MALTC INT, @MASV NVARCHAR(10), @HOCKY INT, @NIENKHOA VARCHAR(9), @MAMH NVARCHAR(10)
AS 
BEGIN 
	-- check dieu kien da dang ky lop tin chi
	/*IF EXISTS(SELECT 1 FROM DANGKY WHERE MASV = @MASV AND MALTC = @MALTC AND HUYDANGKY = 0)
	BEGIN
		RAISERROR('Bạn đã đăng ký lớp tín chỉ này rồi!', 16, 1);
		RETURN;
	END*/

	-- kiểm tra không được đk lớp tín chỉ có môn học thuộc cùng niên khóa - học kỳ mà khác nhóm
	IF EXISTS(SELECT 1 FROM DANGKY 
	WHERE MASV = @MASV AND HUYDANGKY = 0 AND MALTC IN
	(SELECT MALTC FROM LOPTINCHI WHERE NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY AND MAMH = @MAMH AND MALTC != @MALTC))
	BEGIN
		RAISERROR('Không được đăng ký cùng một môn học ở hai nhóm khác nhau', 16, 1)
		RETURN;
	END
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_CHECKLOP]    Script Date: 6/25/2024 10:23:16 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_CHECKLOP] @MaLop NVARCHAR(10), @TenLop NVARCHAR(50)
AS
BEGIN
	IF EXISTS(SELECT TENLOP FROM LOP WHERE TENLOP = @TenLop)
	BEGIN
		RETURN 3 -- trùng tên lớp
	END
	ELSE
	IF EXISTS(SELECT TENLOP FROM LINK1.QLDSV_TC.DBO.LOP WHERE TENLOP = @TenLop)
	BEGIN
		RETURN 4 -- TRÙNG TÊN LỚP KHOA KHÁC
	END
	IF EXISTS(SELECT MALOP FROM LOP WHERE MALOP = @MaLop)
    BEGIN
        RETURN 1 -- trùng mã
    END
    ELSE 
	IF EXISTS (SELECT MALOP FROM LINK1.QLDSV_TC.DBO.LOP WHERE MALOP = @MaLop)
    BEGIN
        RETURN 2 -- trùng mã khoa khác
    END
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[sp_CHECKLOPTINCHI]    Script Date: 6/25/2024 10:23:25 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_CHECKLOPTINCHI] @MALTC INT, @MAMH NVARCHAR(10), @NIENKHOA NVARCHAR(9), @HOCKY INT, @NHOM INT
AS
BEGIN
	-- kiểm tra xem có bị trùng mã ltc ở site phân mảnh không
	IF EXISTS(SELECT 1 FROM LINK1.QLDSV_TC.DBO.LOPTINCHI WHERE MALTC = @MALTC)
		RETURN 1
	ELSE
	BEGIN
		-- kiểm tra ở site hiện tại
		IF EXISTS(SELECT MAMH, NIENKHOA, HOCKY, NHOM FROM LOPTINCHI
		WHERE MAMH = @MAMH AND NIENKHOA = @NIENKHOA AND NHOM = @NHOM AND HOCKY = @HOCKY AND MALTC != @MALTC)
			RETURN 2 -- trùng MAMH, NIENKHOA, HOCKY, NHOM
	
		-- kiểm tra ở site phân mảnh còn lại
		ELSE 
		BEGIN
			IF EXISTS(SELECT MAMH, NIENKHOA, HOCKY, NHOM FROM LINK1.QLDSV_TC.DBO.LOPTINCHI
			WHERE MAMH = @MAMH AND NIENKHOA = @NIENKHOA AND NHOM = @NHOM AND HOCKY = @HOCKY)
				RETURN 2 -- trùng MAMH, NIENKHOA, HOCKY, NHOM trên site khác
			ELSE RETURN 0
		END
	END
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_CHECKLTC_BangDiemMHLTC]    Script Date: 6/25/2024 10:23:33 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_CHECKLTC_BangDiemMHLTC]
@NIENKHOA NCHAR(9), @HOCKY INT, @TENMH NVARCHAR(50), @NHOM INT
AS
BEGIN
	DECLARE @MALTC INT
	SELECT @MALTC = MALTC FROM LOPTINCHI 
	WHERE NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY AND NHOM = @NHOM AND
	MAMH = (SELECT MAMH FROM MONHOC WHERE TENMH = @TENMH)
	IF @MALTC IS NOT NULL
		SELECT MALTC = @MALTC
	ELSE SELECT -1
END


GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_CHECKLTC_DSSVDK]    Script Date: 6/25/2024 10:23:41 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


  CREATE PROC [dbo].[SP_CHECKLTC_DSSVDK]
  @NIENKHOA varchar(9), @HOCKY int, @MAMH VARCHAR(10), @NHOM INT
  AS
  BEGIN
	DECLARE @MALTC INT

	-- kiểm tra ở site 1
	SELECT @MALTC = MALTC FROM LOPTINCHI 
	WHERE NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY AND MAMH = @MAMH AND NHOM = @NHOM AND HUYLOP = 0
	IF @MALTC IS NOT NULL
		SELECT MALTC = @MALTC, MAKHOA = (SELECT MAKHOA FROM KHOA)

	ELSE
	BEGIN
		-- kiểm tra ở site 2
		SELECT @MALTC = MALTC FROM LINK1.QLDSV_TC.DBO.LOPTINCHI
		WHERE NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY AND MAMH = @MAMH AND NHOM = @NHOM AND HUYLOP = 0
		IF @MALTC IS NOT NULL
			SELECT MALTC = @MALTC, MAKHOA = (SELECT MAKHOA FROM LINK1.QLDSV_TC.DBO.KHOA)

		-- trả về -1 nếu không tồn tại
		ELSE SELECT -1
	END
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_CHECKMALOP]    Script Date: 6/25/2024 10:23:49 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_CHECKMALOP]
    @X nchar(10)
AS
BEGIN
    IF EXISTS (SELECT MALOP FROM LOP WHERE MALOP = @X)
    BEGIN
        RETURN 2
    END
    ELSE IF EXISTS (SELECT MALOP FROM LINK1.QLDSV_TC.DBO.LOP WHERE MALOP = @X)
    BEGIN
        RETURN 1
    END
    ELSE
    BEGIN
        RETURN 0
    END
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_CHECKMAMH_LTC]    Script Date: 6/25/2024 10:23:57 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_CHECKMAMH_LTC]
@MAMH NCHAR(10)
AS
IF EXISTS (SELECT MAMH FROM LOPTINCHI WHERE MAMH = @MAMH)
	BEGIN
		SELECT 1
	END
ELSE
	IF EXISTS (SELECT MAMH FROM LINK0.QLDSV_TC.dbo.LOPTINCHI WHERE MAMH = @MAMH)
	BEGIN
		SELECT 1
	END
	ELSE
		SELECT 0


GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_CHECKMASV]    Script Date: 6/25/2024 10:24:05 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_CHECKMASV]
@MASV VARCHAR(10)
AS
BEGIN 
	IF EXISTS (SELECT MASV FROM SINHVIEN WHERE MASV = @MASV)
		SELECT 1
	ELSE IF EXISTS (SELECT MASV FROM LINK1.QLDSV_TC.DBO.SINHVIEN WHERE MASV = @MASV)
		SELECT 2
	ELSE SELECT 0
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_CHECKSV_LOGIN]    Script Date: 6/25/2024 10:24:12 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_CHECKSV_LOGIN]
@MASV VARCHAR(10), @PASSWORD VARCHAR(20), @MAKHOA VARCHAR(5)
AS
BEGIN
	-- tìm sinh viên ở site hiện tại
	BEGIN
		IF EXISTS (SELECT 1 FROM SINHVIEN 
					WHERE MASV = @MASV AND PASSWORD = @PASSWORD 
					AND MALOP IN (SELECT MALOP FROM LOP WHERE MAKHOA = @MAKHOA))
		BEGIN
			IF EXISTS (SELECT 1 FROM SINHVIEN WHERE MASV = @MASV AND DANGHIHOC = 1)
				SELECT 1 -- sinh vien co tai khoan nhung da nghi hoc
			ELSE -- thong tin dang nhap dung
				SELECT MASV, HOTEN = HO + ' ' + TEN FROM SINHVIEN WHERE MASV = @MASV
		END
		ELSE SELECT 2 -- thong tin dang nhap sai
	END
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_CHECKTENLOP]    Script Date: 6/25/2024 10:24:19 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE Proc [dbo].[SP_CHECKTENLOP]
 @Y nchar(10),@X nvarchar(50)
AS
	
	IF exists(select TENLOP from LOP where TENLOP = @X AND MALOP = @Y)
	Begin
		return 1
	end
	else
	if exists(select TENLOP from LINK1.QLDSV_TC.DBO.LOP where TENLOP = @X AND MALOP = @Y)
	Begin
		return 2
	End
	else
		return 0
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_CHUYENLOP_SV]    Script Date: 6/25/2024 10:24:27 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_CHUYENLOP_SV]
    @MaSinhVien NCHAR(10),
    @MaLop NCHAR(10)
AS
SET XACT_ABORT ON;
BEGIN DISTRIBUTED TRANSACTION;
BEGIN
    SET NOCOUNT ON;

    DECLARE @MASV_NEW NVARCHAR(10);
    DECLARE @HO NVARCHAR(50), @TEN NVARCHAR(10), @PHAI BIT, @DIACHI NVARCHAR(100), @NGAYSINH DATE, @PASSWORD NVARCHAR(40);
	DECLARE @NGHIHOC BIT, @MALOP_CU NCHAR(10)

	-- Nếu sinh viên đó còn nợ học phí thì không cho chuyển khoa
	DECLARE @TONGHOCPHI BIGINT, @TIENDADONG BIGINT
	SELECT @TONGHOCPHI=SUM(HOCPHI) FROM LINK2.QLDSV_TC.DBO.HOCPHI WHERE MASV=@MaSinhVien
	SELECT @TIENDADONG=SUM(SOTIENDONG) FROM LINK2.QLDSV_TC.DBO.CT_DONGHOCPHI WHERE MASV=@MaSinhVien
	IF @TIENDADONG < @TONGHOCPHI 
	BEGIN
		RAISERROR('Sinh viên hiện vẫn còn đang nợ học phí!', 16, 1)
	END

	-- Nếu người dùng đang chuyển sinh viên ở site hiện tại
	IF EXISTS(SELECT 1 FROM SINHVIEN WHERE MASV=@MaSinhVien AND DANGHIHOC=0)
	BEGIN 
		-- Lưu lại thông tin của sinh viên chuyển lớp
		SELECT @HO = HO, @TEN = TEN, @PHAI = PHAI, @DIACHI = DIACHI, @NGAYSINH = NGAYSINH, @PASSWORD = PASSWORD
		FROM SINHVIEN WHERE MASV = @MaSinhVien;

		-- Kiểm tra nếu sinh viên đã nghỉ học thì không chuyển
		SELECT @NGHIHOC=DANGHIHOC FROM SINHVIEN WHERE MASV=@MaSinhVien
		IF @NGHIHOC=1
		BEGIN
			RAISERROR('Sinh viên này hiện đã nghỉ học!', 16, 1)
			RETURN
		END
		-- Hàm tạo mã sinh viên mới
		SELECT @MASV_NEW = CONCAT(
			(SELECT LEFT(MASV, 7) FROM SINHVIEN WHERE MASV = @MaSinhVien),
			(SELECT RIGHT('000' + CAST(MAX(CAST(RIGHT(MASV, 3) AS INT)) + 1 AS NVARCHAR(3)), 3) FROM LINK0.QLDSV_TC.DBO.SINHVIEN)
		);
		PRINT N'Mã sinh viên mới: ' + @MASV_NEW;

		-- Nếu mã lớp tồn tại ở site hiện tại
		-- TH1: Chuyển lớp cùng khoa.
		IF EXISTS(SELECT 1 FROM LOP WHERE MALOP=@MaLop)
		BEGIN
			-- Kiểm tra sinh viên đã đăng ký lớp tín chỉ nào chưa. Nếu chưa có thì chỉ sửa mã lớp
			IF NOT EXISTS (SELECT 1 FROM DANGKY WHERE MASV = @MaSinhVien)
			BEGIN
				-- Nếu chưa đăng ký thì cập nhật mã lớp
				UPDATE SINHVIEN SET MALOP = @MaLop WHERE MASV = @MaSinhVien;
			END
			-- Nếu có rồi 
			ELSE
			BEGIN 
				IF EXISTS(SELECT 1 FROM SINHVIEN WHERE HO = @HO AND TEN = @TEN AND PHAI = @PHAI 
						AND DIACHI = @DIACHI AND NGAYSINH = @NGAYSINH AND MASV != @MaSinhVien)
				BEGIN
					UPDATE SINHVIEN SET DANGHIHOC = 0 
					WHERE HO = @HO AND TEN = @TEN AND PHAI = @PHAI 
							AND DIACHI = @DIACHI AND NGAYSINH = @NGAYSINH AND MASV != @MaSinhVien;
				END
				ELSE
				BEGIN 
					INSERT INTO SINHVIEN (MASV, HO, TEN, PHAI, DIACHI, NGAYSINH, MALOP, DANGHIHOC, PASSWORD)
					VALUES (@MASV_NEW, @HO, @TEN, @PHAI, @DIACHI, @NGAYSINH, @MaLop, 0, @PASSWORD);
				END

				-- Chuyển DANGHIHOC = 1 đối với SINHVIEN hiện tại
				UPDATE DBO.SINHVIEN SET DANGHIHOC = 1 WHERE MASV = @MaSinhVien;
			END
		END

		-- TH2: Chuyển lớp khác khoa. Làm tương tự
		ELSE
		BEGIN
			IF EXISTS(SELECT 1 FROM LINK1.QLDSV_TC.DBO.SINHVIEN WHERE HO = @HO AND TEN = @TEN AND PHAI = @PHAI 
						AND DIACHI = @DIACHI AND NGAYSINH = @NGAYSINH)
			BEGIN
				-- Lấy mã lớp mà sinh viên đó đã theo học
				SELECT @MALOP_CU=MALOP FROM LINK1.QLDSV_TC.DBO.SINHVIEN WHERE HO = @HO AND TEN = @TEN AND PHAI = @PHAI 
							AND DIACHI = @DIACHI AND NGAYSINH = @NGAYSINH
				IF LTRIM(RTRIM(@MALOP_CU)) COLLATE Latin1_General_BIN = LTRIM(RTRIM(@MaLop)) COLLATE Latin1_General_BIN
				BEGIN
					UPDATE LINK1.QLDSV_TC.DBO.SINHVIEN SET DANGHIHOC = 0 
					WHERE HO = @HO AND TEN = @TEN AND PHAI = @PHAI AND DIACHI = @DIACHI AND NGAYSINH = @NGAYSINH AND MALOP=@MALOP;
				END
				ELSE
				BEGIN
					INSERT INTO LINK1.QLDSV_TC.DBO.SINHVIEN (MASV, HO, TEN, PHAI, DIACHI, NGAYSINH, MALOP, DANGHIHOC, PASSWORD)
					VALUES (@MASV_NEW, @HO, @TEN, @PHAI, @DIACHI, @NGAYSINH, @MaLop, 0, @PASSWORD);
				END
			END
			ELSE
			BEGIN 
				INSERT INTO LINK1.QLDSV_TC.DBO.SINHVIEN (MASV, HO, TEN, PHAI, DIACHI, NGAYSINH, MALOP, DANGHIHOC, PASSWORD)
				VALUES (@MASV_NEW, @HO, @TEN, @PHAI, @DIACHI, @NGAYSINH, @MaLop, 0, @PASSWORD);
			END
			-- Chuyển DANGHIHOC = 1 đối với SINHVIEN hiện tại
			UPDATE DBO.SINHVIEN SET DANGHIHOC = 1 WHERE MASV = @MaSinhVien;
		END
	END

	-- Nếu người dùng đang chuyển sinh viên ở khoa khác
	ELSE
	BEGIN
		-- Lưu lại thông tin của sinh viên chuyển lớp
		SELECT @HO = HO, @TEN = TEN, @PHAI = PHAI, @DIACHI = DIACHI, @NGAYSINH = NGAYSINH, @PASSWORD = PASSWORD
		FROM LINK1.QLDSV_TC.DBO.SINHVIEN WHERE MASV = @MaSinhVien;

		-- Kiểm tra nếu sinh viên đã nghỉ học thì không chuyển
		SELECT @NGHIHOC=DANGHIHOC FROM LINK1.QLDSV_TC.DBO.SINHVIEN WHERE MASV=@MaSinhVien
		IF @NGHIHOC=1
		BEGIN
			RAISERROR('Sinh viên này hiện đã nghỉ học!', 16, 1)
			RETURN
		END
		-- Hàm tạo mã sinh viên mới
		SELECT @MASV_NEW = CONCAT(
			(SELECT LEFT(MASV, 7) FROM LINK1.QLDSV_TC.DBO.SINHVIEN WHERE MASV = @MaSinhVien),
			(SELECT RIGHT('000' + CAST(MAX(CAST(RIGHT(MASV, 3) AS INT)) + 1 AS NVARCHAR(3)), 3) FROM LINK0.QLDSV_TC.DBO.SINHVIEN)
		);

		PRINT N'Mã sinh viên mới: ' + @MASV_NEW;

		-- Nếu mã lớp tồn tại ở KHOA còn lại
		-- TH1: Chuyển lớp cùng khoa.
		IF EXISTS(SELECT 1 FROM LINK1.QLDSV_TC.DBO.LOP WHERE MALOP=@MaLop)
		BEGIN
			-- Kiểm tra sinh viên đã đăng ký lớp tín chỉ nào chưa. Nếu chưa có thì chỉ sửa mã lớp
			IF NOT EXISTS (SELECT 1 FROM LINK1.QLDSV_TC.DBO.DANGKY WHERE MASV = @MaSinhVien)
			BEGIN
				-- Nếu chưa đăng ký thì cập nhật mã lớp
				UPDATE LINK1.QLDSV_TC.DBO.SINHVIEN SET MALOP = @MaLop WHERE MASV = @MaSinhVien;
			END
			-- Nếu có rồi 
			ELSE
			BEGIN 
				IF EXISTS(SELECT 1 FROM LINK1.QLDSV_TC.DBO.SINHVIEN WHERE HO = @HO AND TEN = @TEN AND PHAI = @PHAI
				AND DIACHI = @DIACHI AND NGAYSINH = @NGAYSINH AND MASV != @MaSinhVien)
				BEGIN
					UPDATE LINK1.QLDSV_TC.DBO.SINHVIEN SET DANGHIHOC = 0 
					WHERE HO = @HO AND TEN = @TEN AND PHAI = @PHAI 
							AND DIACHI = @DIACHI AND NGAYSINH = @NGAYSINH AND MASV != @MaSinhVien;
				END
				ELSE
				BEGIN 
					INSERT INTO LINK1.QLDSV_TC.DBO.SINHVIEN (MASV, HO, TEN, PHAI, DIACHI, NGAYSINH, MALOP, DANGHIHOC, PASSWORD)
					VALUES (@MASV_NEW, @HO, @TEN, @PHAI, @DIACHI, @NGAYSINH, @MaLop, 0, @PASSWORD);
				END

				-- Chuyển DANGHIHOC = 1 đối với SINHVIEN hiện tại
				UPDATE LINK1.QLDSV_TC.DBO.SINHVIEN SET DANGHIHOC = 1 WHERE MASV = @MaSinhVien;
			END
		END

		-- TH2: Chuyển lớp khác khoa. Làm tương tự
		ELSE
		BEGIN
			IF EXISTS(SELECT 1 FROM SINHVIEN WHERE HO = @HO AND TEN = @TEN AND PHAI = @PHAI 
						AND DIACHI = @DIACHI AND NGAYSINH = @NGAYSINH)
			BEGIN
				-- Lấy mã lớp mà sinh viên đó đã theo học
				SELECT @MALOP_CU=MALOP FROM SINHVIEN WHERE HO = @HO AND TEN = @TEN AND PHAI = @PHAI 
							AND DIACHI = @DIACHI AND NGAYSINH = @NGAYSINH
				IF LTRIM(RTRIM(@MALOP_CU)) COLLATE Latin1_General_BIN = LTRIM(RTRIM(@MaLop)) COLLATE Latin1_General_BIN
				BEGIN
					UPDATE SINHVIEN SET DANGHIHOC = 0 
					WHERE HO = @HO AND TEN = @TEN AND PHAI = @PHAI AND DIACHI = @DIACHI AND NGAYSINH = @NGAYSINH AND MALOP=@MALOP;
				END
				ELSE
				BEGIN
					INSERT INTO SINHVIEN (MASV, HO, TEN, PHAI, DIACHI, NGAYSINH, MALOP, DANGHIHOC, PASSWORD)
					VALUES (@MASV_NEW, @HO, @TEN, @PHAI, @DIACHI, @NGAYSINH, @MaLop, 0, @PASSWORD);
				END
			END
			ELSE
			BEGIN 
				INSERT INTO SINHVIEN (MASV, HO, TEN, PHAI, DIACHI, NGAYSINH, MALOP, DANGHIHOC, PASSWORD)
				VALUES (@MASV_NEW, @HO, @TEN, @PHAI, @DIACHI, @NGAYSINH, @MaLop, 0, @PASSWORD);
			END
			-- Chuyển DANGHIHOC = 1 đối với SINHVIEN hiện tại
			UPDATE LINK1.QLDSV_TC.DBO.SINHVIEN SET DANGHIHOC = 1 WHERE MASV = @MaSinhVien;
		END
	END
    COMMIT TRANSACTION;
    PRINT N'Hoàn thành giao dịch';
END;
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_DANGKYLTC]    Script Date: 6/25/2024 10:24:38 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_DANGKYLTC] @MALTC INT, @MASV NVARCHAR(10), @HOCKY INT, @NIENKHOA VARCHAR(9), @MAMH NVARCHAR(10), @CHIPHI INT
AS 
BEGIN 
	
	SET XACT_ABORT ON 
	BEGIN DISTRIBUTED TRANSACTION;

	-- update dangky
	IF EXISTS(SELECT 1 FROM DANGKY WHERE MASV = @MASV AND MALTC = @MALTC AND HUYDANGKY = 1)
	BEGIN
		UPDATE DANGKY SET HUYDANGKY = 0 WHERE MASV = @MASV AND MALTC = @MALTC
	END

	ELSE
	BEGIN
		INSERT INTO DANGKY(MASV, MALTC, HUYDANGKY) VALUES(@MASV, @MALTC, 0)
	END

	-- cap nhat hoc phi hien tai
	DECLARE @TONGTIET INT
	SELECT @TONGTIET = SOTIET_LT + SOTIET_TH FROM MONHOC WHERE MAMH = @MAMH

	-- update hoc phi khi da co ban ghi hoc phi truoc do
	IF EXISTS(SELECT 1 FROM LINK2.QLDSV_TC.DBO.HOCPHI WHERE MASV = @MASV AND HOCKY = @HOCKY AND NIENKHOA = @NIENKHOA)
	BEGIN
		UPDATE LINK2.QLDSV_TC.DBO.HOCPHI SET HOCPHI += (@TONGTIET/15) * @CHIPHI 
		WHERE MASV = @MASV AND HOCKY = @HOCKY AND NIENKHOA = @NIENKHOA
	END
	-- them hoc phi khi chua co ban ghi
	ELSE
	BEGIN
		INSERT INTO LINK2.QLDSV_TC.DBO.HOCPHI(MASV, NIENKHOA, HOCKY, HOCPHI) 
		VALUES(@MASV, @NIENKHOA, @HOCKY, (@TONGTIET/15) * @CHIPHI)
	END

	COMMIT TRANSACTION;
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[sp_DanhSachDongHocPhiCuaLop]    Script Date: 6/25/2024 10:24:45 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE proc [dbo].[sp_DanhSachDongHocPhiCuaLop]
@MALOP NCHAR(10), @NK NCHAR(9),  @HK INT
AS
BEGIN
	SELECT ROW_NUMBER() OVER(ORDER BY SV.MASV) AS STT, SV.MASV, HOTEN, HOCPHI, ISNULL(SUM(CTHP.SOTIENDONG),0) AS SOTIENDADONG
	FROM (SELECT MASV, CONCAT(HO,' ',TEN) AS HOTEN FROM SINHVIEN
			WHERE MALOP = @MALOP) SV
	INNER JOIN (SELECT MASV, HOCPHI FROM HOCPHI WHERE NIENKHOA = @NK AND HOCKY = @HK) HP
	ON SV.MASV = HP.MASV
	LEFT JOIN (SELECT MASV, SOTIENDONG FROM CT_DONGHOCPHI WHERE NIENKHOA = @NK AND HOCKY = @HK) CTHP
	ON HP.MASV = CTHP.MASV
	GROUP BY SV.MASV, SV.HOTEN, HP.HOCPHI
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_DONGHOCPHI]    Script Date: 6/25/2024 10:24:53 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_DONGHOCPHI]
	@MASV NCHAR(10),
	@NIENKHOA NCHAR(9),
	@HOCKY INT,
	@NGAYDONG_NVARCHAR NVARCHAR(10),
	@SOTIENDONG INT
AS
BEGIN
	DECLARE @NGAYDONG DATETIME;
    SET @NGAYDONG = CONVERT(DATETIME, @NGAYDONG_NVARCHAR, 103);
	IF EXISTS(SELECT 1 FROM CT_DONGHOCPHI WHERE NGAYDONG = @NGAYDONG
		AND MASV = @MASV AND NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY)
		UPDATE CT_DONGHOCPHI SET SOTIENDONG += @SOTIENDONG 
		WHERE NGAYDONG = @NGAYDONG AND MASV = @MASV AND NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY
	ELSE
		INSERT INTO CT_DONGHOCPHI(MASV,NIENKHOA,HOCKY,NGAYDONG,SOTIENDONG) 
		values(@MASV, @NIENKHOA, @HOCKY, @NGAYDONG, @SOTIENDONG)
END

GO
USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_DSLTC_DK]    Script Date: 6/25/2024 10:25:01 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_DSLTC_DK]
@HOCKY INT, @NIENKHOA VARCHAR(9)
AS
BEGIN
	SELECT LTC.MALTC, MH.MAMH, MH.TENMH, NHOM, GV.GIANGVIEN, SOSVDK = COALESCE(COUNT(DK.MASV), 0)
	FROM (SELECT * FROM LOPTINCHI WHERE NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY AND HUYLOP = 0) LTC 
	LEFT JOIN (SELECT MAMH, TENMH FROM MONHOC) MH ON LTC.MAMH = MH.MAMH
	LEFT JOIN (SELECT MAGV, GIANGVIEN = HO + ' ' + TEN FROM GIANGVIEN) GV ON LTC.MAGV = GV.MAGV
	LEFT JOIN (SELECT MASV, MALTC FROM DANGKY) DK ON LTC.MALTC = DK.MALTC
	GROUP BY LTC.MALTC, MH.MAMH, MH.TENMH, NHOM, GV.GIANGVIEN
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_DSLTC_SVDK]    Script Date: 6/25/2024 10:25:11 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_DSLTC_SVDK]
@MASV VARCHAR(10), @NIENKHOA VARCHAR(9), @HOCKY INT
AS
BEGIN
	-- tạo bảng tạm để lưu trữ dữ liệu từ sp_dsltc_dk
	DECLARE @TEMP TABLE (
        MALTC INT,
        MAMH VARCHAR(10),
		TENMH NVARCHAR(50),
		NHOM INT,
		GIANGVIEN NVARCHAR(50),
		SOSVDK INT
    );

	-- đổ dữ liệu từ sp vào bảng tạm
	INSERT INTO @TEMP EXEC [dbo].[SP_DSLTC_DK] @HOCKY, @NIENKHOA;

	SELECT T.* FROM @TEMP T
	JOIN DANGKY DK ON T.MALTC = DK.MALTC WHERE DK.MASV = @MASV AND HUYDANGKY = 0
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[sp_DSLTCTheoKhoa]    Script Date: 6/25/2024 10:25:20 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[sp_DSLTCTheoKhoa]
@NIENKHOA NCHAR(9), @HOCKY INT
AS
BEGIN
	SELECT TENMH, NHOM, HOTEN, SOSVTOITHIEU, SOSVDK = COUNT(DK.MASV)
	FROM (SELECT MALTC, MAMH, NHOM, MAGV, SOSVTOITHIEU FROM LOPTINCHI
	WHERE NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY AND HUYLOP = 0) LTC JOIN 
	(SELECT MAMH, TENMH FROM MONHOC) MH ON LTC.MAMH = MH.MAMH JOIN 
	(SELECT MAGV, HOTEN = HO + ' ' + TEN FROM GIANGVIEN) GV ON LTC.MAGV = GV.MAGV LEFT JOIN
	(SELECT MASV, MALTC FROM DANGKY) DK ON LTC.MALTC = DK.MALTC
	GROUP BY DK.MALTC, TENMH, NHOM, HOTEN, SOSVTOITHIEU
	ORDER BY TENMH, NHOM
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_DSSV_DKLTC]    Script Date: 6/25/2024 10:25:28 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_DSSV_DKLTC]
@MALTC INT
 AS
 BEGIN
	
	SELECT MASV, HO, TEN, PHAI, MALOP, MAKHOA = (SELECT MAKHOA FROM KHOA)
	FROM (SELECT * FROM SINHVIEN WITH (INDEX(IX_SINHVIEN_TEN_HO)) WHERE DANGHIHOC = 0) SV 
	WHERE MASV IN (SELECT MASV FROM DANGKY WHERE HUYDANGKY = 0 AND MALTC = @MALTC)
	
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_GETCTHOCPHI]    Script Date: 6/25/2024 10:25:37 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_GETCTHOCPHI] 
	@MASV NCHAR(10),
	@NIENKHOA NCHAR(9),
	@HOCKY INT
AS
BEGIN
	SELECT CT.NGAYDONG,CT.SOTIENDONG  FROM CT_DONGHOCPHI CT
	WHERE CT.MASV = @MASV AND CT.NIENKHOA = @NIENKHOA AND CT.HOCKY = @HOCKY
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_GETHOCPHI_MASV]    Script Date: 6/25/2024 10:25:45 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_GETHOCPHI_MASV]
	@MASV NCHAR(10)
AS
BEGIN
	SELECT HP.MASV, HP.NIENKHOA, HP.HOCKY, HP.HOCPHI,
	DADONG = ISNULL(SUM(CTHP.SOTIENDONG), 0)
	FROM 
	(SELECT * FROM HOCPHI WHERE HOCPHI.MASV = @MASV) HP 
	LEFT JOIN
	(SELECT * FROM CT_DONGHOCPHI WHERE CT_DONGHOCPHI.MASV = @MASV) CTHP
	ON (HP.NIENKHOA = CTHP.NIENKHOA AND HP.HOCKY = CTHP.HOCKY)
	GROUP BY HP.MASV, HP.NIENKHOA, HP.HOCKY, HP.HOCPHI
	ORDER BY HP.NIENKHOA, HP.HOCKY ASC
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_GETINFO_SV]    Script Date: 6/25/2024 10:25:53 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_GETINFO_SV]
@MASV NVARCHAR(10)
AS 
BEGIN
	IF EXISTS(SELECT MASV FROM SINHVIEN WHERE MASV = @MASV)
		SELECT SINHVIEN.*, MAKHOA = (SELECT MAKHOA FROM KHOA) FROM SINHVIEN WHERE MASV = @MASV
	ELSE
		SELECT SV.*, MAKHOA = (SELECT MAKHOA FROM LINK1.QLDSV_TC.DBO.KHOA) FROM LINK1.QLDSV_TC.DBO.SINHVIEN SV WHERE MASV = @MASV
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_GETSERVER]    Script Date: 6/25/2024 10:26:03 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [dbo].[SP_GETSERVER]
@MASV NVARCHAR(10)
AS 
BEGIN
	DECLARE @MAKHOA NVARCHAR(5)
	SELECT @MAKHOA = MAKHOA FROM LOP WHERE MALOP = (SELECT MALOP FROM SINHVIEN WHERE MASV = @MASV)
	IF (@MAKHOA IS NULL)
		SELECT -1
	ELSE 
		IF (@MAKHOA = 'CNTT')
			SELECT 'LAPTOP-CC48TIIO\MSSQLSERVER01'
		ELSE IF (@MAKHOA = 'VT')
			SELECT 'LAPTOP-CC48TIIO\MSSQLSERVER02'
		ELSE
			SELECT 0
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_HUYDANGKY_LTC]    Script Date: 6/25/2024 10:26:21 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_HUYDANGKY_LTC]
@MALTC INT, @MASV NVARCHAR(10), @HOCKY INT, @NIENKHOA VARCHAR(9), @MAMH NVARCHAR(10), @CHIPHI INT
AS
BEGIN
	SET XACT_ABORT ON 
	BEGIN DISTRIBUTED TRANSACTION 
	-- Cập nhật trạng thái đăng ký
	UPDATE DANGKY SET HUYDANGKY = 1 WHERE MALTC = @MALTC AND MASV = @MASV

	-- Tổng học phí hiện tại của sinh viên
	DECLARE @TONGTIET INT, @HOCPHI INT
	SELECT SOTIET_LT + SOTIET_TH FROM MONHOC WHERE MAMH = @MAMH

	-- set lại học phí sau khi hủy đăng ký
	SET @HOCPHI = (SELECT HP.HOCPHI FROM LINK2.QLDSV_TC.DBO.HOCPHI HP 
					WHERE MASV = @MASV AND NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY)
					- (@TONGTIET / 15) * @CHIPHI

	-- update học phí của sinh viên (nếu bằng 0 thì xóa bản ghi bên table học phí)
	IF @HOCPHI > 0
	BEGIN
		UPDATE LINK2.QLDSV_TC.DBO.HOCPHI SET HOCPHI = @HOCPHI 
		WHERE MASV = @MASV AND NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY
	END
	ELSE
	BEGIN
		DELETE FROM LINK2.QLDSV_TC.DBO.HOCPHI
		WHERE MASV = @MASV AND NIENKHOA = @NIENKHOA AND HOCKY = @HOCKY
	END
	COMMIT TRANSACTION
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_INSERT_SV_MALOP]    Script Date: 6/25/2024 10:26:34 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_INSERT_SV_MALOP]
    @MASV NVARCHAR(10),
    @HO NVARCHAR(50),
    @TEN NVARCHAR(50),
    @DIACHI NVARCHAR(100),
    @PHAI BIT,
    @NGAYSINH DATE,
    @DANGHIHOC BIT,
    @PASSWORD NVARCHAR(40)
AS
BEGIN
    INSERT INTO SinhVien (MASV, HO, TEN, DIACHI, PHAI, NGAYSINH, DANGHIHOC, PASSWORD)
    VALUES (@MASV, @HO, @TEN, @DIACHI, @PHAI, @NGAYSINH, @DANGHIHOC, @PASSWORD);
END;
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_LayDSLTC]    Script Date: 6/25/2024 10:26:44 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_LayDSLTC]
@NK NVARCHAR(10), @HK INT
AS
BEGIN
	SELECT MALTC, TENMH, NHOM, HOTEN = HO + ' ' + TEN
	FROM (SELECT MALTC, MAMH, NHOM, MAGV FROM LOPTINCHI
			WHERE NIENKHOA = @NK AND HOCKY = @HK AND HUYLOP = 0) LTC, 
			(SELECT MAMH, TENMH FROM MONHOC) MH,
			(SELECT MAGV, HO, TEN FROM GIANGVIEN) GV
	WHERE LTC.MAMH = MH.MAMH AND LTC.MAGV = GV.MAGV
	ORDER BY TENMH, NHOM
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_LayDSSV_DANGKY]    Script Date: 6/25/2024 10:26:52 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[SP_LayDSSV_DANGKY]
@MALTC INT
AS
BEGIN
	SELECT SV.MASV, HOTENSV = HO + ' ' + TEN, DIEM_CC, DIEM_GK, DIEM_CK
	FROM (SELECT MASV, DIEM_CC, DIEM_GK, DIEM_CK FROM DANGKY
			WHERE MALTC = @MALTC AND HUYDANGKY = 0) DK, 
			(SELECT MASV, HO, TEN FROM SINHVIEN) SV 
	WHERE DK.MASV = SV.MASV
	ORDER BY SV.MASV
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_LayThongTinDangNhap]    Script Date: 6/25/2024 10:27:08 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_LayThongTinDangNhap]
@TENLOGIN NVARCHAR (50)
AS 
BEGIN
	DECLARE @TENUSER NVARCHAR (50)
	SELECT @TENUSER = NAME FROM sys.sysusers WHERE sid = SUSER_SID(@TENLOGIN)

	SELECT USERNAME = @TENUSER,
	HOTEN = (SELECT HO + ' ' + TEN FROM GIANGVIEN WHERE MAGV = @TENUSER),
	TENNHOM = NAME
	FROM sys.sysusers WHERE UID = 
		(SELECT GROUPUID FROM sys.sysmembers WHERE MEMBERUID = 
			(SELECT UID FROM sys.sysusers WHERE NAME = @TENUSER)
		)
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_PhieuDiemSV]    Script Date: 6/25/2024 10:27:16 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_PhieuDiemSV]
@MASV NCHAR(10)
AS
BEGIN
	SELECT TENMH, MAX(DIEM_CC*0.1+DIEM_GK*0.3+DIEM_CK*0.6) AS DIEMHETMON
	FROM (SELECT MALTC, DIEM_CC, DIEM_GK, DIEM_CK FROM DANGKY
		WHERE MASV = @MASV AND HUYDANGKY = 0) DK, 
		(SELECT MALTC, MAMH FROM LOPTINCHI WHERE HUYLOP = 0) LTC, 
		(SELECT MAMH, TENMH FROM MONHOC) MH
	WHERE DK.MALTC = LTC.MALTC AND LTC.MAMH = MH.MAMH
GROUP BY TENMH
ORDER BY TENMH
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_TAOLOGIN]    Script Date: 6/25/2024 10:27:24 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[SP_TAOLOGIN]
  @LGNAME VARCHAR(50), @PASS VARCHAR(50), @USERNAME VARCHAR(50), @ROLE VARCHAR(50)
AS
  DECLARE @RET INT
  EXEC @RET = SP_ADDLOGIN @LGNAME, @PASS,'QLDSV_TC'
  IF (@RET = 1)  -- LOGIN NAME BI TRUNG
     RETURN 1
 
  EXEC @RET = SP_GRANTDBACCESS @LGNAME, @USERNAME
  IF (@RET = 1)  -- USER  NAME BI TRUNG
  BEGIN
       EXEC SP_DROPLOGIN @LGNAME
       RETURN 2
  END
  EXEC sp_addrolemember @ROLE, @USERNAME
  IF @ROLE= 'PGV' OR @ROLE= 'PKT' OR @ROLE = 'KHOA'
  BEGIN 
    EXEC sp_addsrvrolemember @LGNAME, 'SecurityAdmin'
    EXEC sp_addsrvrolemember @LGNAME, 'ProcessAdmin'
  END
RETURN 0  
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[SP_UpdateDiem]    Script Date: 6/25/2024 10:27:44 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

create PROC [dbo].[SP_UpdateDiem]
@DIEMTHI TYPE_DANGKY READONLY
AS
BEGIN
	MERGE INTO DANGKY AS TARGET
	USING (SELECT MALTC, MASV, DIEM_CC, DIEM_GK, DIEM_CK FROM @DIEMTHI) AS SOURCE
	ON TARGET.MALTC = SOURCE.MALTC AND TARGET.MASV = SOURCE.MASV
	WHEN MATCHED THEN
		UPDATE SET TARGET.DIEM_CC = SOURCE.DIEM_CC, 
					TARGET.DIEM_GK = SOURCE.DIEM_GK,
					TARGET.DIEM_CK = SOURCE.DIEM_CK
	WHEN NOT MATCHED THEN
		INSERT (MALTC, MASV, DIEM_CC, DIEM_GK, DIEM_CK)
		VALUES (SOURCE.MALTC, SOURCE.MASV, SOURCE.DIEM_CC, SOURCE.DIEM_GK, SOURCE.DIEM_CK);
END
GO

USE [QLDSV_TC]
GO

/****** Object:  StoredProcedure [dbo].[Xoa_Login]    Script Date: 6/25/2024 10:28:29 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROC [dbo].[Xoa_Login]
  @LGNAME VARCHAR(50),
  @USRNAME VARCHAR(50)
  
AS
BEGIN
  EXEC SP_DROPLOGIN @LGNAME
  EXEC SP_DROPUSER @USRNAME
  RETURN 0
END
GO


